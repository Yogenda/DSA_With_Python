Introduction

What is Data Structure?
different ways of organizing data on your computer that can be used efficiently.

from s/w point of view DS is important becaues
- efficiency
- performance
s/w is dependent on how you are storing and organizing the data

real life examples
- people standing in queue for new phone launch
- whiting for there order
- organizing books in shelf

What is algorithm?
    set of instruction to perform a task.

real life examples
    - ATM withdrawal
    - construct wall
    - making a tea
    - order a food from zomato

algorithm
    - Input
    - Calcuation / Process
    - Output / stop when you get your answer

What makes a good algo?
    - Correctness 
    - Efficient


Why DSA is important?

- Input: m,t,w,t,f,s,s, 20,45,30,25,34,43,39
- Process: Arrange, maerge, sort, maths operatinos.......
- Output: m - 20, t - 45, w-30........
our main responsiblitiy is to perform the action on data in Process section.


Google map:
- input: source and destination
- Process: 
- Ouput: provide the shortes and Efficient path


Why companies are asking DSA questions
- to check the fundamental of programming
- Problem solving skills
- limited time to judge


---------- class 2 --------
Different type of Data Structure
    - Primitive: not able to break down into sub data types or data structures
    - Non primitive: can broken down into sub data type or data structure based on our requirement.

Primitive:
    - fix size
    - simple
    - simple operations

Non Primitive:
    - larger in size and are flexible (we can grow or shrink the size)
    - complex (collection of many primitive data structures).
    - more complex operations (sorting, searching, data manipulation.....)


Primitive:
    - Integer
    - Float
    - String
    - Boolean

Non Primitive:
    - Linear: when the elements are in squential order (we have to define the order of an element).
        - List
        - Tuple
        - Arrays
        - Linked List
        - Stack
        - Queue
    - Non Linear: when the elements are not arranged in a sequntial order
        - Set
        - Dictionary
        - Tree
        - Graph


Type of algorithms:
    - Sorting algorithm
    - Searching algorithm
    - Graph algorithm
    - Dynamic Programming algorithm
    - Divide and conqueror algorithm
    - Recursive algorithm



Quiz
Question 1: Why do we need data structure and algorithms?
    1. To develop software
    2. To run our developed software
    3. To develop memory and time efficient application (Correct)


Question 2: What is primitive data structure?
    1. Built in data structure in any given programming language (Correct)
    2. user defined data structure.



Question 3: Please select non primitive data structure.
    1. Integer
    2. String
    3. Boolean
    4. Array (Correct)


Question 4: Which of the following is NOT a linear data structure?
    1. Array 
    2. Linked List 
    3. Stack
    4. Queue
    5. Tree (Correct)


What is Big O?
    it is language or a metrix which is used to describe the efficiency of an algorithm

--------- class 3 -------------
What is Big O?
    it is language or a metrix which is used to describe the efficiency of an algorithm.

Time Complexity:
Note: runtime of the function increases as the size of input increases

3 greak letters
    - Omega: Best Case
    - Theta: Avg Case
    - Omicron: Worst Case

Run time complexity:
    - O(1)  -   Constant time     -   addition of 2 number
    - O(N)  -   Linear time       -   loop the nubmer from 0 to N
    - O(LogN)-  Lograthmic        -   finding an element in a sorted array
    - O(N^2) -  Quadratic         -   Nested Loops
    - O(2^n) -  Expontial         -   Double recursion (fibonachi)

O(1) (Constant time)


Space Complexity: the amount of memory required to run the program perfectly.

How to measure the complexity
    - rule 1: if statements - O(1)
    - rule 2: simple for loop no nested loops - O(N)
    - rule 3: nested loop with same type - O(n^2)
    - rule 4: loop in controled way (finde the even number) - O(log n)
    - rule 5: working with multiple statements so just add them.



Quiz:
Question 1: What is the time complexity of the following Python code snippet?
    sum = 0
    for i in range(n):
        sum += i

    1. O(n) (Correct)
    2. O(1)
    3. O(log)



Question 2: What is the time complexity of the following Python code snippet?
sum = 0
for i in range(n):
    for j in range(n):
        sum += i * j

1. O(1)
2. O(n*log n)
3. O(log n)
4. O(n^2) (Correct)



Question 3: What is the time complexity of the following Python code snippet?
sum = 0
i = 1
while i <= n:
    sum += i
    i *= 2

1. O(n)
2. O(1)
3. O(n^2)
4. O(log n) (correct)


Question 4: What is the time complexity of the following Python code snippet?
sum = 0
for i in range(n):
    for j in range(m):
        sum += i * j

1. O(n*m) (correct)
2. O(n + m)
3. O(n^2 + m^2)
4. O(2^n)



----- Array -----
Array are the collection of same type of data.

NOTE: we can use numpy and array module to create a array.

values of array: 4  6   9   7
Index          : 0  1   2   3

    - array can only store of specific data type
    - value are in contiguos way.
    - each value in array has unique index.


Type of Array:(2 types)
    - one dimension
    - multi dimension
        - two D
        - three D
        - .
        - .
        - n D



create an array
    - array module
    - NumPy module (most famous)

Accessing the elements in array








